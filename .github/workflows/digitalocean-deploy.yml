name: GoMeet DigitalOcean Deployment

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      deployment_type:
        description: "Deployment type"
        required: true
        default: "rolling"
        type: choice
        options:
          - rolling
          - blue-green
          - canary
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip automated tests"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: gomeet
  NAMESPACE: gomeet

jobs:
  # Code quality and security checks
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      should-deploy: ${{ steps.decision.outputs.deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'packages/backend/**'
              - 'deployment/**'
            frontend:
              - 'packages/frontend/**'
              - 'deployment/**'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            packages/backend/package-lock.json
            packages/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd packages/backend && npm ci
          cd ../frontend && npm ci

      - name: Lint backend
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd packages/backend
          npm run lint

      - name: Lint frontend
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd packages/frontend
          npm run lint

      - name: Type check backend
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd packages/backend
          npm run type-check

      - name: Type check frontend
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd packages/frontend
          npm run check

      - name: Security audit backend
        if: steps.changes.outputs.backend == 'true'
        run: |
          cd packages/backend
          npm audit --audit-level moderate

      - name: Security audit frontend
        if: steps.changes.outputs.frontend == 'true'
        run: |
          cd packages/frontend
          npm audit --audit-level moderate

      - name: Deploy decision
        id: decision
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "deploy=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and test backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.backend-changed == 'true' || needs.quality-check.outputs.should-deploy == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gomeet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        working-directory: packages/backend
        run: go mod download

      - name: Run tests
        working-directory: packages/backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/gomeet_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          TURN_SERVER_SECRET: test-turn-secret
        run: |
          go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: packages/backend/coverage.out
          flags: backend
          name: backend-coverage

  # Build and test frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.frontend-changed == 'true' || needs.quality-check.outputs.should-deploy == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: packages/frontend/package-lock.json

      - name: Install dependencies
        working-directory: packages/frontend
        run: npm ci

      - name: Run unit tests
        working-directory: packages/frontend
        run: npm run test:unit

      - name: Build frontend
        working-directory: packages/frontend
        run: npm run build

      - name: Run E2E tests
        working-directory: packages/frontend
        run: |
          npm run test:e2e:ci

  # Build Docker images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality-check, test-backend, test-frontend]
    if: needs.quality-check.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service:
          - auth-service
          - meeting-service
          - signaling-service
          - chat-service
          - turn-service
          - frontend
          - livekit-sfu
          - livekit-recorder

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, build-images]
    if: |
      needs.quality-check.outputs.should-deploy == 'true' && 
      (github.ref == 'refs/heads/develop' || 
       github.event_name == 'pull_request' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment:
      name: staging
      url: https://staging.gomeet.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy infrastructure
        run: |
          chmod +x deployment/digitalocean/master-deploy.sh
          ./deployment/digitalocean/master-deploy.sh \
            --environment staging \
            --namespace ${{ env.NAMESPACE }} \
            --skip-infrastructure \
            --verbose

      - name: Deploy services
        run: |
          chmod +x deployment/digitalocean/build-images.sh
          chmod +x deployment/digitalocean/rolling-update.sh

          # Get the image tag
          IMAGE_TAG="${{ github.sha }}"
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            IMAGE_TAG="develop-${{ github.sha }}"
          fi

          # Deploy services with rolling update
          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy rolling \
            update auth-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy rolling \
            update meeting-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/meeting-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy rolling \
            update signaling-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/signaling-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy rolling \
            update chat-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/chat-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy rolling \
            update frontend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$IMAGE_TAG

      - name: Health check
        run: |
          chmod +x deployment/digitalocean/health-check.sh
          ./deployment/digitalocean/health-check.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format table \
            check

      - name: Run integration tests
        run: |
          # Wait for services to be ready
          sleep 60

          # Run integration tests against staging
          cd packages/backend
          go test -v -tags=integration ./tests/integration/... \
            -base-url=https://staging.gomeet.app

      - name: Post-deployment verification
        run: |
          chmod +x deployment/digitalocean/health-check.sh
          ./deployment/digitalocean/health-check.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format table \
            --continuous 120 \
            check &

          HEALTH_PID=$!

          # Monitor for 2 minutes
          sleep 120

          # Stop health check
          kill $HEALTH_PID 2>/dev/null || true

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, build-images, deploy-staging]
    if: |
      needs.quality-check.outputs.should-deploy == 'true' && 
      (github.ref == 'refs/heads/main' || 
       github.ref == 'refs/tags/v*' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production
      url: https://app.gomeet.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create backup before deployment
        run: |
          chmod +x deployment/digitalocean/backup-restore.sh
          ./deployment/digitalocean/backup-restore.sh \
            --namespace ${{ env.NAMESPACE }} \
            backup

      - name: Deploy services
        run: |
          chmod +x deployment/digitalocean/rolling-update.sh

          # Get deployment strategy
          DEPLOYMENT_STRATEGY="${{ github.event.inputs.deployment_type || 'rolling' }}"

          # Get the image tag
          IMAGE_TAG="${{ github.sha }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IMAGE_TAG="main-${{ github.sha }}"
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.* ]]; then
            IMAGE_TAG="${{ github.ref }}"
          fi

          # Deploy core services first
          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update auth-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update meeting-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/meeting-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update signaling-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/signaling-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update chat-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/chat-service:$IMAGE_TAG

          # Deploy WebRTC services
          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update turn-service ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/turn-service:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update livekit-sfu ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/livekit-sfu:$IMAGE_TAG

          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update livekit-recorder ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/livekit-recorder:$IMAGE_TAG

          # Deploy frontend last
          ./deployment/digitalocean/rolling-update.sh \
            --namespace ${{ env.NAMESPACE }} \
            --strategy $DEPLOYMENT_STRATEGY \
            update frontend ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:$IMAGE_TAG

      - name: Health check
        run: |
          chmod +x deployment/digitalocean/health-check.sh
          ./deployment/digitalocean/health-check.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format table \
            check

      - name: Post-deployment health monitoring
        run: |
          chmod +x deployment/digitalocean/health-check.sh
          ./deployment/digitalocean/health-check.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format table \
            --continuous 300 \
            check &

          HEALTH_PID=$!

          # Monitor for 5 minutes
          sleep 300

          # Stop health check
          kill $HEALTH_PID 2>/dev/null || true

      - name: Scale services based on load
        run: |
          chmod +x deployment/digitalocean/scale-services.sh
          ./deployment/digitalocean/scale-services.sh \
            --namespace ${{ env.NAMESPACE }} \
            --mode auto \
            auto

      - name: Cost monitoring
        run: |
          chmod +x deployment/digitalocean/cost-monitor.sh
          ./deployment/digitalocean/cost-monitor.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format json \
            monitor

      - name: Notify deployment success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ GoMeet deployment to production successful!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nDeployed by: ${{ github.actor }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ GoMeet deployment to production failed!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nDeployed by: ${{ github.actor }}\nCheck GitHub Actions for details"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && needs.deploy-production.result == 'failure'
    environment:
      name: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Rollback services
        run: |
          chmod +x deployment/digitalocean/rolling-update.sh

          # Rollback critical services
          services=("auth-service" "meeting-service" "signaling-service" "chat-service" "frontend")

          for service in "${services[@]}"; do
            echo "Rolling back $service..."
            ./deployment/digitalocean/rolling-update.sh \
              --namespace ${{ env.NAMESPACE }} \
              rollback "$service" || true
          done

      - name: Restore from backup
        run: |
          chmod +x deployment/digitalocean/backup-restore.sh

          # Get latest backup
          LATEST_BACKUP=$(aws s3 ls s3://gomeet-backups/backups/ --recursive --sort-by=LastModified | tail -n 1 | awk '{print $4}')

          if [[ -n "$LATEST_BACKUP" ]]; then
            echo "Restoring from backup: $LATEST_BACKUP"
            ./deployment/digitalocean/backup-restore.sh \
              --namespace ${{ env.NAMESPACE }} \
              restore-spaces "$LATEST_BACKUP"
          fi

      - name: Notify rollback
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🔄 GoMeet rollback completed due to deployment failure!\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}\nInitiated by: ${{ github.actor }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  # Scheduled maintenance tasks
  maintenance:
    name: Scheduled Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Daily backup
        run: |
          chmod +x deployment/digitalocean/backup-restore.sh
          ./deployment/digitalocean/backup-restore.sh \
            --namespace ${{ env.NAMESPACE }} \
            backup

      - name: Health check
        run: |
          chmod +x deployment/digitalocean/health-check.sh
          ./deployment/digitalocean/health-check.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format table \
            check

      - name: Cost monitoring
        run: |
          chmod +x deployment/digitalocean/cost-monitor.sh
          ./deployment/digitalocean/cost-monitor.sh \
            --namespace ${{ env.NAMESPACE }} \
            --format json \
            --email ${{ secrets.BUDGET_ALERT_EMAIL }} \
            monitor

      - name: Cleanup old resources
        run: |
          # Clean up old completed jobs
          kubectl delete jobs --field-selector status.successful=1 -n ${{ env.NAMESPACE }} --ignore-not-found=true

          # Clean up old pods
          kubectl delete pods --field-selector status.phase=Succeeded -n ${{ env.NAMESPACE }} --ignore-not-found=true
          kubectl delete pods --field-selector status.phase=Failed -n ${{ env.NAMESPACE }} --ignore-not-found=true

          # Clean up old configmaps and secrets (keep last 10)
          kubectl get configmaps -n ${{ env.NAMESPACE }} --no-headers | tail -n +11 | awk '{print $1}' | xargs -r kubectl delete configmap -n ${{ env.NAMESPACE }}
