version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: gomeet-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - gomeet-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: gomeet-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - gomeet-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile
    container_name: gomeet-backend
    environment:
      PORT: ${PORT:-8080}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      WEBRTC_STUN_SERVER: ${WEBRTC_STUN_URL:-stun:stun.l.google.com:19302}
      WEBRTC_TURN_SERVER: ${WEBRTC_TURN_URL}
      WEBRTC_TURN_USERNAME: ${WEBRTC_TURN_USERNAME}
      WEBRTC_TURN_CREDENTIAL: ${WEBRTC_TURN_CREDENTIAL}
    ports:
      - "${PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - gomeet-network
    volumes:
      - ./packages/backend:/app
    working_dir: /app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (SvelteKit)
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile
    container_name: gomeet-frontend
    environment:
      PUBLIC_API_URL: ${PUBLIC_API_URL}
      PUBLIC_WS_URL: ${PUBLIC_WS_URL}
      PUBLIC_APP_NAME: ${PUBLIC_APP_NAME}
      PUBLIC_APP_VERSION: ${PUBLIC_APP_VERSION:-1.0.0}
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gomeet-network
    volumes:
      - ./packages/frontend:/app
    working_dir: /app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  gomeet-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
