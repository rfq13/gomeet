apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: gomeet
data:
  postgresql.conf: |
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 5000
    superuser_reserved_connections = 50

    # Memory settings
    shared_buffers = 32GB
    effective_cache_size = 96GB
    work_mem = 256MB
    maintenance_work_mem = 4GB
    huge_pages = try
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 32
    max_parallel_maintenance_workers = 8
    parallel_tuple_cost = 0.1
    parallel_setup_cost = 1000.0
    min_parallel_table_scan_size = 8MB
    min_parallel_index_scan_size = 8MB

    # WAL settings
    wal_buffers = 256MB
    checkpoint_completion_target = 0.95
    wal_writer_delay = 100ms
    commit_delay = 1000
    commit_siblings = 10
    wal_level = replica
    max_wal_senders = 20
    max_replication_slots = 20
    wal_keep_segments = 64
    archive_mode = on
    archive_command = 'cp %p /var/lib/postgresql/archive/%f'
    max_wal_size = 32GB
    min_wal_size = 8GB
    wal_compression = on

    # Query planner
    random_page_cost = 1.1
    effective_io_concurrency = 400
    seq_page_cost = 1.0
    cpu_tuple_cost = 0.01
    cpu_index_tuple_cost = 0.005
    cpu_operator_cost = 0.0025
    default_statistics_target = 1000

    # Background writer
    bgwriter_delay = 100ms
    bgwriter_lru_maxpages = 200
    bgwriter_lru_multiplier = 4.0
    bgwriter_flush_after = 512kB

    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 12
    autovacuum_naptime = 10s
    autovacuum_vacuum_scale_factor = 0.05
    autovacuum_analyze_scale_factor = 0.02
    autovacuum_vacuum_cost_delay = 10ms
    autovacuum_vacuum_cost_limit = 200

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_truncate_on_rotation = on
    log_rotation_age = 1d
    log_rotation_size = 100MB
    log_min_duration_statement = 500
    log_checkpoints = on
    log_connections = on
    log_disconnections = on
    log_lock_waits = on
    log_temp_files = 10MB
    log_autovacuum_min_duration = 0

    # Replication
    synchronous_commit = remote_write
    hot_standby = on
    hot_standby_feedback = on
    wal_receiver_status_interval = 10s
    recovery_min_apply_delay = 0
    max_standby_archive_delay = 30s
    max_standby_streaming_delay = 30s
    wal_receiver_create_temp_slot = off

    # Performance
    checkpoint_timeout = 30min
    wal_sync_method = fdatasync
    full_page_writes = on

    # Partitioning
    partition_pruning = on
    enable_partitionwise_join = on
    enable_partitionwise_aggregate = on
    enable_partition_pruning = on

    # JIT compilation
    jit = on
    jit_above_cost = 100000
    jit_inline_above_cost = 500000
    jit_optimize_above_cost = 500000

    # Resource management
    statement_timeout = 300000
    lock_timeout = 60000
    idle_in_transaction_session_timeout = 300000

  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD

    # Local connections
    local   all             postgres                                peer
    local   all             all                                     md5

    # IPv4 local connections
    host    all             all             127.0.0.1/32            md5
    host    all             all             0.0.0.0/0               md5

    # IPv6 local connections
    host    all             all             ::1/128                 md5

    # Replication connections
    host    replication     replicator      0.0.0.0/0               md5

  init-shard.sql: |
    -- Create shard databases
    CREATE DATABASE gomeet_shard_1;
    CREATE DATABASE gomeet_shard_2;
    CREATE DATABASE gomeet_shard_3;
    CREATE DATABASE gomeet_shard_4;

    -- Create partitioned participants table in each shard
    \c gomeet_shard_1;
    CREATE TABLE participants (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        meeting_id UUID NOT NULL,
        user_id UUID,
        public_user_id UUID,
        name VARCHAR(255) NOT NULL,
        avatar_url VARCHAR(500),
        is_active BOOLEAN DEFAULT true,
        joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        left_at TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    ) PARTITION BY HASH (meeting_id);

    -- Create 16 partitions per shard for better distribution
    CREATE TABLE participants_0 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 0);
    CREATE TABLE participants_1 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 1);
    CREATE TABLE participants_2 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 2);
    CREATE TABLE participants_3 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 3);
    CREATE TABLE participants_4 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 4);
    CREATE TABLE participants_5 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 5);
    CREATE TABLE participants_6 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 6);
    CREATE TABLE participants_7 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 7);
    CREATE TABLE participants_8 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 8);
    CREATE TABLE participants_9 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 9);
    CREATE TABLE participants_10 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 10);
    CREATE TABLE participants_11 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 11);
    CREATE TABLE participants_12 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 12);
    CREATE TABLE participants_13 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 13);
    CREATE TABLE participants_14 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 14);
    CREATE TABLE participants_15 PARTITION OF participants FOR VALUES WITH (MODULUS 16, REMAINDER 15);

    -- Create indexes
    CREATE INDEX idx_participants_meeting_id ON participants (meeting_id);
    CREATE INDEX idx_participants_user_id ON participants (user_id);
    CREATE INDEX idx_participants_public_user_id ON participants (public_user_id);
    CREATE INDEX idx_participants_is_active ON participants (is_active);
    CREATE INDEX idx_participants_joined_at ON participants (joined_at);
    CREATE INDEX idx_participants_meeting_active ON participants (meeting_id, is_active);

    -- Create meetings table
    CREATE TABLE meetings (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        start_time TIMESTAMP WITH TIME ZONE NOT NULL,
        host_id UUID NOT NULL,
        is_active BOOLEAN DEFAULT false,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    CREATE INDEX idx_meetings_host_id ON meetings (host_id);
    CREATE INDEX idx_meetings_start_time ON meetings (start_time);
    CREATE INDEX idx_meetings_is_active ON meetings (is_active);
    CREATE INDEX idx_meetings_active_time ON meetings (is_active, start_time);

    -- Create chat messages table
    CREATE TABLE chat_messages (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        meeting_id UUID NOT NULL,
        user_id UUID,
        public_user_id UUID,
        message_type VARCHAR(50) NOT NULL,
        content TEXT,
        reply_to_id UUID,
        attachment_url VARCHAR(1000),
        attachment_type VARCHAR(100),
        attachment_name VARCHAR(255),
        is_edited BOOLEAN DEFAULT false,
        edited_at TIMESTAMP WITH TIME ZONE,
        is_deleted BOOLEAN DEFAULT false,
        deleted_at TIMESTAMP WITH TIME ZONE,
        message_status VARCHAR(50) DEFAULT 'sent',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    ) PARTITION BY HASH (meeting_id);

    -- Create partitions for chat messages
    CREATE TABLE chat_messages_0 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 0);
    CREATE TABLE chat_messages_1 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 1);
    CREATE TABLE chat_messages_2 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 2);
    CREATE TABLE chat_messages_3 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 3);
    CREATE TABLE chat_messages_4 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 4);
    CREATE TABLE chat_messages_5 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 5);
    CREATE TABLE chat_messages_6 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 6);
    CREATE TABLE chat_messages_7 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 7);
    CREATE TABLE chat_messages_8 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 8);
    CREATE TABLE chat_messages_9 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 9);
    CREATE TABLE chat_messages_10 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 10);
    CREATE TABLE chat_messages_11 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 11);
    CREATE TABLE chat_messages_12 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 12);
    CREATE TABLE chat_messages_13 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 13);
    CREATE TABLE chat_messages_14 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 14);
    CREATE TABLE chat_messages_15 PARTITION OF chat_messages FOR VALUES WITH (MODULUS 16, REMAINDER 15);

    CREATE INDEX idx_chat_messages_meeting_id ON chat_messages (meeting_id);
    CREATE INDEX idx_chat_messages_user_id ON chat_messages (user_id);
    CREATE INDEX idx_chat_messages_created_at ON chat_messages (created_at);
    CREATE INDEX idx_chat_messages_meeting_created ON chat_messages (meeting_id, created_at);

    -- Copy schema to other shards
    \c gomeet_shard_2;
    \i /docker-entrypoint-initdb.d/init-shard.sql

    \c gomeet_shard_3;
    \i /docker-entrypoint-initdb.d/init-shard.sql

    \c gomeet_shard_4;
    \i /docker-entrypoint-initdb.d/init-shard.sql
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-primary
  namespace: gomeet
  labels:
    app: postgres
    role: primary
spec:
  serviceName: postgres-primary
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      role: primary
  template:
    metadata:
      labels:
        app: postgres
        role: primary
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - postgres
                topologyKey: kubernetes.io/hostname
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              value: gomeet_primary
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_REPLICATION_USER
              value: replicator
            - name: POSTGRES_REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: POSTGRES_REPLICATION_PASSWORD
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            requests:
              cpu: 8000m
              memory: 32Gi
            limits:
              cpu: 16000m
              memory: 64Gi
          volumeMounts:
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgres-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d/init-shard.sql
              subPath: init-shard.sql
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: postgres-wal
              mountPath: /var/lib/postgresql/wal
            - name: postgres-archive
              mountPath: /var/lib/postgresql/archive
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config
        - name: postgres-init
          configMap:
            name: postgres-config
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Ti
        storageClassName: do-block-storage
    - metadata:
        name: postgres-wal
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 500Gi
        storageClassName: do-block-storage
    - metadata:
        name: postgres-archive
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Ti
        storageClassName: do-block-storage
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-replica
  namespace: gomeet
  labels:
    app: postgres
    role: replica
spec:
  serviceName: postgres-replica
  replicas: 3
  selector:
    matchLabels:
      app: postgres
      role: replica
  template:
    metadata:
      labels:
        app: postgres
        role: replica
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - postgres
                topologyKey: kubernetes.io/hostname
      containers:
        - name: postgres
          image: postgres:15-alpine
          env:
            - name: POSTGRES_DB
              value: gomeet_replica
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_PRIMARY_HOST
              value: postgres-primary
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_MASTER_SERVICE
              value: postgres-primary
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            requests:
              cpu: 8000m
              memory: 32Gi
            limits:
              cpu: 16000m
              memory: 64Gi
          volumeMounts:
            - name: postgres-config
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgresql.conf
            - name: postgres-config
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          command:
            - /bin/bash
            - -c
            - |
              set -e
              if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
                pg_basebackup -h $POSTGRES_PRIMARY_HOST -D /var/lib/postgresql/data -U replicator -v -P -W
                echo "standby_mode = 'on'" >> /var/lib/postgresql/data/recovery.conf
                echo "primary_conninfo = 'host=$POSTGRES_PRIMARY_HOST port=5432 user=replicator'" >> /var/lib/postgresql/data/recovery.conf
              fi
              exec docker-entrypoint.sh postgres
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-config
          configMap:
            name: postgres-config
  volumeClaimTemplates:
    - metadata:
        name: postgres-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Ti
        storageClassName: do-block-storage
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-primary
  namespace: gomeet
  labels:
    app: postgres
    role: primary
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres
    role: primary
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: gomeet
  labels:
    app: postgres
    role: replica
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres
    role: replica
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-cluster
  namespace: gomeet
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: postgres
  selector:
    app: postgres
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: gomeet
  labels:
    app: pgbouncer
spec:
  replicas: 6
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - pgbouncer
                topologyKey: kubernetes.io/hostname
      containers:
        - name: pgbouncer
          image: pgbouncer/pgbouncer:latest
          env:
            - name: DATABASES_HOST
              value: postgres-primary
            - name: DATABASES_PORT
              value: "5432"
            - name: DATABASES_USER
              value: postgres
            - name: DATABASES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: POSTGRES_PASSWORD
            - name: DATABASES_DBNAME
              value: gomeet_primary,gomeet_shard_1,gomeet_shard_2,gomeet_shard_3,gomeet_shard_4
            - name: POOL_MODE
              value: transaction
            - name: MAX_CLIENT_CONN
              value: "5000"
            - name: DEFAULT_POOL_SIZE
              value: "200"
            - name: MIN_POOL_SIZE
              value: "50"
            - name: RESERVE_POOL_SIZE
              value: "20"
            - name: RESERVE_POOL_TIMEOUT
              value: "5"
            - name: MAX_DB_CONNECTIONS
              value: "1000"
            - name: MAX_USER_CONNECTIONS
              value: "200"
            - name: SERVER_RESET_QUERY
              value: DISCARD ALL
            - name: SERVER_CHECK_DELAY
              value: "30"
            - name: SERVER_CHECK_QUERY
              value: "select 1"
            - name: SERVER_LIFETIME
              value: "3600"
            - name: SERVER_IDLE_TIMEOUT
              value: "600"
            - name: QUERY_TIMEOUT
              value: "300"
            - name: IDLE_TRANSACTION_TIMEOUT
              value: "300"
          ports:
            - containerPort: 6432
              name: pgbouncer
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
          livenessProbe:
            exec:
              command:
                - pgbouncer
                - --show
                - stats
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pgbouncer
                - --show
                - stats
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: gomeet
  labels:
    app: pgbouncer
spec:
  ports:
    - port: 6432
      targetPort: 6432
      name: pgbouncer
  selector:
    app: pgbouncer
  type: ClusterIP
