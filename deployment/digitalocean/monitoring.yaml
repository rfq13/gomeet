apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: gomeet
  labels:
    app: prometheus
    component: monitoring
    provider: digitalocean
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
        provider: digitalocean
    spec:
      serviceAccountName: prometheus
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - prometheus
                topologyKey: kubernetes.io/hostname
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: prometheus
          image: registry.digitalocean.com/gomeet/prometheus:v2.40.0
          imagePullPolicy: Always
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--storage.tsdb.retention.time=90d"
            - "--storage.tsdb.retention.size=200GB"
            - "--web.enable-lifecycle"
            - "--web.enable-admin-api"
            - "--query.max-concurrency=50"
            - "--query.timeout=5m"
          ports:
            - containerPort: 9090
              name: web
          resources:
            requests:
              cpu: 8000m
              memory: 16Gi
            limits:
              cpu: 16000m
              memory: 32Gi
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: storage
              mountPath: /prometheus
            - name: rules
              mountPath: /etc/prometheus/rules
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: web
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: web
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: config
          configMap:
            name: monitoring-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage
        - name: rules
          configMap:
            name: prometheus-rules
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: gomeet
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/metrics", "services", "endpoints", "pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: gomeet
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: gomeet
  labels:
    app: prometheus
    component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
      name: web
  selector:
    app: prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: gomeet
  labels:
    app: prometheus
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: do-block-storage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: gomeet
  labels:
    app: prometheus
    component: rules
    provider: digitalocean
data:
  gomeet-alerts.yml: |
    groups:
      - name: gomeet-critical
        rules:
          - alert: HighWebSocketConnections
            expr: sum(gomeet_websocket_connections_total) > 45000
            for: 2m
            labels:
              severity: critical
              service: signaling
              provider: digitalocean
            annotations:
              summary: "WebSocket connections approaching limit"
              description: "Active connections: {{ $value }}/50000"
              
          - alert: SFUCPUHigh
            expr: avg(rate(sfu_cpu_usage_percent[5m])) > 80
            for: 3m
            labels:
              severity: warning
              service: livekit
              provider: digitalocean
            annotations:
              summary: "SFU cluster CPU usage high"
              description: "Average CPU: {{ $value }}%"
              
          - alert: SFUBandwidthHigh
            expr: sum(rate(sfu_bandwidth_bytes_per_second[5m])) > 500000000000  # 500Gbps
            for: 5m
            labels:
              severity: warning
              service: livekit
              provider: digitalocean
            annotations:
              summary: "SFU bandwidth usage high"
              description: "Current bandwidth: {{ $value | humanize1024 }}B/s"
              
          - alert: SFUParticipantsHigh
            expr: sum(livekit_participants_total) > 48000
            for: 2m
            labels:
              severity: warning
              service: livekit
              provider: digitalocean
            annotations:
              summary: "SFU participants approaching limit"
              description: "Active participants: {{ $value }}/50000"
              
          - alert: DatabaseConnectionsHigh
            expr: pg_stat_database_numbackends > 4000
            for: 5m
            labels:
              severity: warning
              service: postgresql
              provider: digitalocean
            annotations:
              summary: "Database connections high"
              description: "Active connections: {{ $value }}"
              
          - alert: DatabaseQuerySlow
            expr: histogram_quantile(0.95, rate(pg_stat_statements_mean_time_seconds_bucket[5m])) > 0.1
            for: 5m
            labels:
              severity: warning
              service: postgresql
              provider: digitalocean
            annotations:
              summary: "Database queries slow"
              description: "95th percentile query time: {{ $value }}s"
              
          - alert: RedisMemoryHigh
            expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 > 85
            for: 5m
            labels:
              severity: warning
              service: redis
              provider: digitalocean
            annotations:
              summary: "Redis memory usage high"
              description: "Memory usage: {{ $value }}%"
              
          - alert: RedisConnectionsHigh
            expr: redis_connected_clients > 40000
            for: 3m
            labels:
              severity: warning
              service: redis
              provider: digitalocean
            annotations:
              summary: "Redis connections high"
              description: "Connected clients: {{ $value }}"
              
          - alert: APIHighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) > 0.05
            for: 2m
            labels:
              severity: critical
              service: api
              provider: digitalocean
            annotations:
              summary: "API error rate high"
              description: "Error rate: {{ $value | humanizePercentage }}"
              
          - alert: APIHighLatency
            expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
            for: 5m
            labels:
              severity: warning
              service: api
              provider: digitalocean
            annotations:
              summary: "API latency high"
              description: "95th percentile latency: {{ $value }}s"
              
          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 5m
            labels:
              severity: critical
              service: kubernetes
              provider: digitalocean
            annotations:
              summary: "Pod is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is crash looping"
              
          - alert: NodeMemoryHigh
            expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 90
            for: 5m
            labels:
              severity: warning
              service: node
              provider: digitalocean
            annotations:
              summary: "Node memory usage high"
              description: "Memory usage on {{ $labels.instance }}: {{ $value }}%"
              
          - alert: NodeCPUHigh
            expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
              service: node
              provider: digitalocean
            annotations:
              summary: "Node CPU usage high"
              description: "CPU usage on {{ $labels.instance }}: {{ $value }}%"
              
          - alert: MeetingParticipantsHigh
            expr: sum(gomeet_meeting_participants_active) > 450
            for: 2m
            labels:
              severity: warning
              service: meeting
              provider: digitalocean
            annotations:
              summary: "Meeting participants approaching limit"
              description: "Active participants: {{ $value }}/500"
              
          - alert: MeetingLatencyHigh
            expr: histogram_quantile(0.95, rate(gomeet_webrtc_rtt_seconds_bucket[5m])) > 0.2
            for: 3m
            labels:
              severity: warning
              service: webrtc
              provider: digitalocean
            annotations:
              summary: "WebRTC latency high"
              description: "95th percentile RTT: {{ $value }}s"
              
          - alert: PacketLossHigh
            expr: rate(gomeet_webrtc_packets_lost_total[5m]) / rate(gomeet_webrtc_packets_total[5m]) > 0.02
            for: 3m
            labels:
              severity: warning
              service: webrtc
              provider: digitalocean
            annotations:
              summary: "WebRTC packet loss high"
              description: "Packet loss rate: {{ $value | humanizePercentage }}"
              
          - alert: DigitalOceanLoadBalancerHighLatency
            expr: histogram_quantile(0.95, rate(do_load_balancer_request_duration_seconds_bucket[5m])) > 1.0
            for: 5m
            labels:
              severity: warning
              service: loadbalancer
              provider: digitalocean
            annotations:
              summary: "DigitalOcean Load Balancer latency high"
              description: "95th percentile latency: {{ $value }}s"
              
          - alert: DigitalOceanDROHighCPU
            expr: do_droplet_cpu_usage_percent > 85
            for: 5m
            labels:
              severity: warning
              service: droplet
              provider: digitalocean
            annotations:
              summary: "DigitalOcean Droplet CPU usage high"
              description: "CPU usage: {{ $value }}%"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: gomeet
  labels:
    app: grafana
    component: monitoring
    provider: digitalocean
spec:
  replicas: 3
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        provider: digitalocean
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: grafana
          image: registry.digitalocean.com/gomeet/grafana:9.3.0
          imagePullPolicy: Always
          env:
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: GRAFANA_DB_PASSWORD
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_SECURITY_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: GRAFANA_SECRET_KEY
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: POSTGRES_PASSWORD
            - name: GF_SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: SMTP_USER
            - name: GF_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: gomeet-secrets
                  key: SMTP_PASSWORD
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel"
          ports:
            - containerPort: 3000
              name: web
          resources:
            requests:
              cpu: 2000m
              memory: 4Gi
            limits:
              cpu: 4000m
              memory: 8Gi
          volumeMounts:
            - name: config
              mountPath: /etc/grafana
            - name: storage
              mountPath: /var/lib/grafana
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
          livenessProbe:
            httpGet:
              path: /api/health
              port: web
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: web
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: config
          configMap:
            name: grafana-config
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: dashboards
          configMap:
            name: grafana-dashboards
        - name: datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: gomeet
  labels:
    app: grafana
    component: monitoring
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      name: web
  selector:
    app: grafana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: gomeet
  labels:
    app: grafana
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: do-block-storage
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: gomeet
  labels:
    app: grafana
    component: config
    provider: digitalocean
data:
  grafana.ini: |
    [server]
    domain = grafana.gomeet.com
    root_url = https://grafana.gomeet.com
    serve_from_sub_path = true

    [database]
    type = postgres
    host = pgbouncer:6432
    name = grafana
    user = postgres
    password = ${GF_DATABASE_PASSWORD}

    [security]
    admin_user = admin
    admin_password = ${GF_SECURITY_ADMIN_PASSWORD}
    secret_key = ${GF_SECURITY_SECRET_KEY}

    [auth.anonymous]
    enabled = false

    [users]
    allow_sign_up = false

    [smtp]
    enabled = true
    host = smtp.gmail.com:587
    user = ${GF_SMTP_USER}
    password = ${GF_SMTP_PASSWORD}
    from_address = noreply@gomeet.com

    [alerting]
    enabled = true
    execute_alerts = true

    [unified_alerting]
    enabled = true

    [metrics]
    enabled = true

    [tracing.jaeger]
    enabled = true

    [log]
    mode = console
    level = info

    [paths]
    data = /var/lib/grafana
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: gomeet
  labels:
    app: grafana
    component: datasources
    provider: digitalocean
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        jsonData:
          timeInterval: "10s"
          queryTimeout: "120s"
          httpMethod: POST
          
      - name: PostgreSQL
        type: postgres
        access: proxy
        url: pgbouncer:6432
        database: gomeet_primary
        user: postgres
        secureJsonData:
          password: ${POSTGRES_PASSWORD}
        jsonData:
          postgresVersion: 1500
          timescaledb: false
          
      - name: Redis
        type: redis-datasource
        access: proxy
        url: redis://redis-exporter:9121
        jsonData:
          client: "standalone"
          pingInterval: 30
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: gomeet
  labels:
    app: grafana
    component: dashboards
    provider: digitalocean
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
