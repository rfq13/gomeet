apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gomeet-ingress
  namespace: gomeet
  labels:
    app: gomeet
    component: ingress
    provider: digitalocean
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: "gomeet-security-headers@kubernetescrd"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/issue-temporary-certificate: "true"
    acme.cert-manager.io/http01-edit-in-place: "true"
    # DigitalOcean Load Balancer annotations
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "80"
    service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-type: "cookies"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-name: "GOMEET_STICKY"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-ttl: "3600"
    # Rate limiting
    traefik.ingress.kubernetes.io/router.middlewares: "gomeet-rate-limit@kubernetescrd,gomeet-security-headers@kubernetescrd"
    # CORS
    traefik.ingress.kubernetes.io/router.middlewares: "gomeet-cors@kubernetescrd"
spec:
  tls:
    - hosts:
        - gomeet.com
        - www.gomeet.com
        - app.gomeet.com
        - api.gomeet.com
        - livekit.gomeet.com
        - livekit.filosofine.com
        - traefik.gomeet.com
        - grafana.gomeet.com
        - prometheus.gomeet.com
        - alertmanager.gomeet.com
      secretName: gomeet-tls
  rules:
    # Frontend applications
    - host: gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 5173
    - host: www.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 5173
    - host: app.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 5173
    # API endpoints
    - host: api.gomeet.com
      http:
        paths:
          - path: /api/v1/auth
            pathType: Prefix
            backend:
              service:
                name: auth-service
                port:
                  number: 8080
          - path: /api/v1/meetings
            pathType: Prefix
            backend:
              service:
                name: meeting-service
                port:
                  number: 8080
          - path: /api/v1/chat
            pathType: Prefix
            backend:
              service:
                name: chat-service
                port:
                  number: 8080
          - path: /api/v1/turn
            pathType: Prefix
            backend:
              service:
                name: turn-service
                port:
                  number: 8080
          - path: /api/v1/ws
            pathType: Prefix
            backend:
              service:
                name: signaling-service
                port:
                  number: 8081
    # LiveKit SFU - External
    - host: livekit.filosofine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: livekit-sfu-tcp-lb
                port:
                  number: 7880
    # LiveKit SFU - Internal
    - host: livekit.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: livekit-sfu-tcp-lb
                port:
                  number: 7880
    # Monitoring endpoints
    - host: traefik.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: traefik-internal
                port:
                  number: 8080
    - host: grafana.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana
                port:
                  number: 3000
    - host: prometheus.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prometheus
                port:
                  number: 9090
    - host: alertmanager.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: alertmanager
                port:
                  number: 9093
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gomeet-websocket-ingress
  namespace: gomeet
  labels:
    app: gomeet
    component: websocket-ingress
    provider: digitalocean
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: "gomeet-websocket-headers@kubernetescrd,gomeet-websocket-compression@kubernetescrd,gomeet-websocket-rate-limit@kubernetescrd"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
spec:
  tls:
    - hosts:
        - api.gomeet.com
      secretName: gomeet-tls
  rules:
    - host: api.gomeet.com
      http:
        paths:
          - path: /api/v1/ws
            pathType: Prefix
            backend:
              service:
                name: signaling-service
                port:
                  number: 8081
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gomeet-livekit-ingress
  namespace: gomeet
  labels:
    app: gomeet
    component: livekit-ingress
    provider: digitalocean
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: "gomeet-livekit-circuit-breaker@kubernetescrd,gomeet-timeout@kubernetescrd"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
spec:
  tls:
    - hosts:
        - livekit.gomeet.com
        - livekit.filosofine.com
      secretName: gomeet-tls
  rules:
    - host: livekit.gomeet.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: livekit-sfu-tcp-lb
                port:
                  number: 7880
    - host: livekit.filosofine.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: livekit-sfu-tcp-lb
                port:
                  number: 7880
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-security-headers
  namespace: gomeet
spec:
  headers:
    frameDeny: true
    contentTypeNosniff: true
    browserXssFilter: true
    referrerPolicy: "strict-origin-when-cross-origin"
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Content-Type-Options: "nosniff"
      X-Frame-Options: "DENY"
      X-XSS-Protection: "1; mode=block"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains"
      Content-Security-Policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' wss: https:; media-src 'self' blob:;"
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-rate-limit
  namespace: gomeet
spec:
  rateLimit:
    average: 1000
    burst: 2000
    period: 1m
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-websocket-rate-limit
  namespace: gomeet
spec:
  rateLimit:
    average: 2000
    burst: 4000
    period: 1m
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-cors
  namespace: gomeet
spec:
  headers:
    accessControlAllowCredentials: true
    accessControlAllowHeaders:
      - Content-Type
      - Authorization
      - X-Requested-With
    accessControlAllowMethods:
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    accessControlAllowOriginList:
      - "https://gomeet.com"
      - "https://www.gomeet.com"
      - "https://app.gomeet.com"
      - "https://api.gomeet.com"
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-websocket-headers
  namespace: gomeet
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: "https"
      X-Forwarded-For: "{{.ClientHost}}"
    accessControlAllowCredentials: "true"
    accessControlAllowHeaders: "Content-Type, Authorization, X-Requested-With"
    accessControlAllowMethods: "GET, POST, OPTIONS"
    accessControlAllowOriginList: "https://gomeet.com,https://api.gomeet.com,https://app.gomeet.com"
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-websocket-compression
  namespace: gomeet
spec:
  compress:
    excludedContentTypes:
      - text/event-stream
      - application/grpc
    minResponseBodyBytes: 1024
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-timeout
  namespace: gomeet
spec:
  timeout:
    request: 30s
    readTimeout: 30s
    writeTimeout: 30s
    idleTimeout: 60s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-websocket-timeout
  namespace: gomeet
spec:
  timeout:
    request: 300s
    readTimeout: 300s
    writeTimeout: 300s
    idleTimeout: 600s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-livekit-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.15"
    checkPeriod: 2s
    fallbackDuration: 3s
    recoveryDuration: 3s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-api-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.2"
    checkPeriod: 5s
    fallbackDuration: 10s
    recoveryDuration: 10s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-websocket-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.1"
    checkPeriod: 3s
    fallbackDuration: 5s
    recoveryDuration: 5s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-retry
  namespace: gomeet
spec:
  retry:
    attempts: 3
    initialInterval: 100ms
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: gomeet-compression
  namespace: gomeet
spec:
  compress:
    excludedContentTypes:
      - text/event-stream
      - application/grpc
    minResponseBodyBytes: 1024
---
apiVersion: v1
kind: Service
metadata:
  name: gomeet-ingress-lb
  namespace: gomeet
  labels:
    app: gomeet
    component: ingress-lb
    provider: digitalocean
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "80"
    service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-type: "cookies"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-name: "GOMEET_INGRESS_STICKY"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-ttl: "3600"
    service.beta.kubernetes.io/do-loadbalancer-redirect-http-to-https: "true"
    service.beta.kubernetes.io/do-loadbalancer-certificate-id: ""  # Will be populated with actual certificate ID
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
    - name: websocket
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: traefik
---
apiVersion: v1
kind: Service
metadata:
  name: gomeet-websocket-lb
  namespace: gomeet
  labels:
    app: gomeet
    component: websocket-lb
    provider: digitalocean
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "8080"
    service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-type: "source"
    service.beta.kubernetes.io/do-loadbalancer-certificate-id: ""  # Will be populated with actual certificate ID
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: websocket
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: traefik
---
apiVersion: v1
kind: Service
metadata:
  name: gomeet-livekit-lb
  namespace: gomeet
  labels:
    app: gomeet
    component: livekit-lb
    provider: digitalocean
  annotations:
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "7880"
    service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    service.beta.kubernetes.io/do-loadbalancer-certificate-id: ""  # Will be populated with actual certificate ID
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 7880
      targetPort: 7880
      protocol: TCP
    - name: rtc-tcp
      port: 7882
      targetPort: 7882
      protocol: TCP
    - name: rtc-tls
      port: 7883
      targetPort: 7883
      protocol: TCP
  selector:
    app: livekit-sfu