apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: gomeet
  labels:
    app: traefik
    component: gateway
    provider: digitalocean
spec:
  replicas: 2
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
        component: gateway
        provider: digitalocean
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - traefik
                topologyKey: kubernetes.io/hostname
      serviceAccountName: traefik
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: traefik
          image: traefik:v2.10
          imagePullPolicy: Always
          args:
            - --configfile=/etc/traefik/traefik.yml
          ports:
            - name: web
              containerPort: 80
              protocol: TCP
            - name: websecure
              containerPort: 443
              protocol: TCP
            - name: websocket
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 8082
              protocol: TCP
            - name: dashboard
              containerPort: 8081
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DO_LB_ID
              valueFrom:
                secretKeyRef:
                  name: digitalocean-credentials
                  key: DO_LB_ID
            - name: DO_REGION
              valueFrom:
                secretKeyRef:
                  name: digitalocean-credentials
                  key: DO_REGION
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /ping
              port: web
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ping
              port: web
            initialDelaySeconds: 5
            periodSeconds: 3
            timeoutSeconds: 2
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /etc/traefik
            - name: dynamic-config
              mountPath: /etc/traefik/dynamic
            - name: acme
              mountPath: /etc/traefik/acme
            - name: certs
              mountPath: /etc/traefik/certs
            - name: logs
              mountPath: /var/log/traefik
          securityContext:
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            readOnlyRootFilesystem: false
            runAsUser: 0
            runAsGroup: 0
      volumes:
        - name: config
          configMap:
            name: traefik-config
        - name: dynamic-config
          configMap:
            name: traefik-config
        - name: acme
          persistentVolumeClaim:
            claimName: traefik-acme
        - name: certs
          secret:
            secretName: traefik-tls-certs
            optional: true
        - name: logs
          emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik
  namespace: gomeet
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["traefik.io"]
    resources:
      - "middlewares"
      - "middlewaretcps"
      - "ingressroutes"
      - "traefikservices"
      - "ingressrouteudps"
      - "tlsoptions"
      - "tlsstores"
      - "serverstransports"
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: gomeet
---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: gomeet
  labels:
    app: traefik
    component: gateway
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8082"
    prometheus.io/path: "/metrics"
    service.beta.kubernetes.io/do-loadbalancer-enable-proxy-protocol: "true"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-path: "/ping"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/do-loadbalancer-healthcheck-port: "80"
    service.beta.kubernetes.io/do-loadbalancer-algorithm: "least_connections"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-type: "cookies"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-name: "TRAFFIK_STICKY"
    service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-ttl: "3600"
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: web
      port: 80
      targetPort: web
      protocol: TCP
    - name: websecure
      port: 443
      targetPort: websecure
      protocol: TCP
    - name: websocket
      port: 8080
      targetPort: websocket
      protocol: TCP
    - name: metrics
      port: 8082
      targetPort: metrics
      protocol: TCP
  selector:
    app: traefik
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-internal
  namespace: gomeet
  labels:
    app: traefik
    component: gateway
spec:
  type: ClusterIP
  ports:
    - name: web
      port: 80
      targetPort: web
    - name: websecure
      port: 443
      targetPort: websecure
    - name: websocket
      port: 8080
      targetPort: websocket
    - name: metrics
      port: 8082
      targetPort: metrics
  selector:
    app: traefik
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: traefik-acme
  namespace: gomeet
  labels:
    app: traefik
    component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: do-block-storage
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: api-auth
  namespace: gomeet
spec:
  basicAuth:
    secret: traefik-basic-auth
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: websocket-compression
  namespace: gomeet
spec:
  compress:
    excludedContentTypes:
      - text/event-stream
    minResponseBodyBytes: 1024
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: api-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.2"
    checkPeriod: 5s
    fallbackDuration: 10s
    recoveryDuration: 10s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: websocket-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.1"
    checkPeriod: 3s
    fallbackDuration: 5s
    recoveryDuration: 5s
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: livekit-circuit-breaker
  namespace: gomeet
spec:
  circuitBreaker:
    expression: "NetworkErrorRatio() > 0.15"
    checkPeriod: 2s
    fallbackDuration: 3s
    recoveryDuration: 3s
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`traefik.gomeet.com`)
      kind: Rule
      services:
        - name: traefik-internal
          port: 8080
      middlewares:
        - name: api-auth
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: api-gateway
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`api.gomeet.com`) && PathPrefix(`/api/v1/auth`)
      kind: Rule
      services:
        - name: auth-service
          port: 8080
      middlewares:
        - name: security-headers
          namespace: gomeet
        - name: api-ratelimit
          namespace: gomeet
        - name: api-circuit-breaker
          namespace: gomeet
        - name: timeout
          namespace: gomeet
        - name: retry
          namespace: gomeet
    - match: Host(`api.gomeet.com`) && PathPrefix(`/api/v1/meetings`)
      kind: Rule
      services:
        - name: meeting-service
          port: 8080
      middlewares:
        - name: security-headers
          namespace: gomeet
        - name: api-ratelimit
          namespace: gomeet
        - name: api-circuit-breaker
          namespace: gomeet
        - name: timeout
          namespace: gomeet
        - name: retry
          namespace: gomeet
    - match: Host(`api.gomeet.com`) && PathPrefix(`/api/v1/chat`)
      kind: Rule
      services:
        - name: chat-service
          port: 8080
      middlewares:
        - name: security-headers
          namespace: gomeet
        - name: api-ratelimit
          namespace: gomeet
        - name: api-circuit-breaker
          namespace: gomeet
        - name: timeout
          namespace: gomeet
        - name: retry
          namespace: gomeet
    - match: Host(`api.gomeet.com`) && PathPrefix(`/api/v1/turn`)
      kind: Rule
      services:
        - name: turn-service
          port: 8080
      middlewares:
        - name: security-headers
          namespace: gomeet
        - name: api-ratelimit
          namespace: gomeet
        - name: api-circuit-breaker
          namespace: gomeet
        - name: timeout
          namespace: gomeet
        - name: retry
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: websocket-gateway
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`api.gomeet.com`) && PathPrefix(`/api/v1/ws`)
      kind: Rule
      services:
        - name: signaling-service
          port: 8081
      middlewares:
        - name: websocket-headers
          namespace: gomeet
        - name: websocket-ratelimit
          namespace: gomeet
        - name: websocket-circuit-breaker
          namespace: gomeet
        - name: websocket-compression
          namespace: gomeet
        - name: websocket-timeout
          namespace: gomeet
        - name: websocket-in-flight-req
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: livekit-gateway
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`livekit.gomeet.com`)
      kind: Rule
      services:
        - name: livekit-sfu
          port: 7880
      middlewares:
        - name: livekit-circuit-breaker
          namespace: gomeet
        - name: timeout
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: frontend-gateway
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`gomeet.com`) || Host(`www.gomeet.com`) || Host(`app.gomeet.com`)
      kind: Rule
      services:
        - name: frontend
          port: 3000
      middlewares:
        - name: security-headers
          namespace: gomeet
        - name: compression
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: monitoring-gateway
  namespace: gomeet
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`grafana.gomeet.com`)
      kind: Rule
      services:
        - name: grafana
          port: 3000
      middlewares:
        - name: api-auth
          namespace: gomeet
    - match: Host(`prometheus.gomeet.com`)
      kind: Rule
      services:
        - name: prometheus
          port: 9090
      middlewares:
        - name: api-auth
          namespace: gomeet
    - match: Host(`alertmanager.gomeet.com`)
      kind: Rule
      services:
        - name: alertmanager
          port: 9093
      middlewares:
        - name: api-auth
          namespace: gomeet
  tls:
    certResolver: letsencrypt
    options:
      name: modern
